            --- PING ---
_____________________________________

* Moth <- * //flashlight (websocketClient.js)
    'messageType': 'ping',
    'intervalTransmissionInformation': obj.intervalTransmissionInformation,
    'maxCountProcessFiltering': obj.maxCountProcessFiltering
*****************

* Flashlight <- * //moth (getResponsePong.js)
    messageType = 'pong';
    ipAddress = ip;
    data = {
        countTransmissionInformation
        intervalTransmissionInformation
        maxCountProcessFiltering
    }
*****************



      --- SOURCE INFORMATION ---
_____________________________________

* Flashlight <- * //moth (getInformation.js)
    'messageType': 'information',
    'ipAddress': objConfig.externalIpAddress,
    'currentDateTime': +new Date(),
    'diskSpace': result.diskSpace,
    'timeInterval': result.timeInterval,
    'randomAccessMemory': result.randomAccessMemory,
    'loadCPU': result.loadCPU,
    'loadNetwork': result.loadNetwork
*****************



          --- FILTERING ---
_____________________________________

* Moth <- * //flashlight (processinfFiltering.js)
    messageType = 'filtering';
    processing = 'on';
    taskIndex = uniqueTaskId;
    dateTimeStart: obj.dateTimeStart;
    dateTimeEnd: obj.dateTimeEnd;
    ipaddress: ipaddress;
    network: network
*****************

* Flashlight <- * //moth (processingFileFiltering.js)
    --- готов к началу фильтрации ---
    'messageType': 'filtering',
    'processing': 'start',
    'clientIp': self.objRequest.clientIp,
    'taskIndex': self.taskIndex,
    'directoryFiltering': obj.directoryFiltering,
    'countDirectoryFiltering': obj.countDirectory,
    'countFullCycle': obj.countFullCycle,
    'countCycleComplete': 0,
    'countFilesFiltering': obj.countListFilesFiltering,
    'countFilesChunk': MAX_COUNT_FILES,
    'countFilesFound': 0,
    'countFilesProcessed': 0,
    'countMaxFilesSize': self.maxFilesSize,
    'countFoundFilesSize': 0
*****************

следом и на каждую из завершенных частей фильтрации

* Flashlight <- * //moth (processingFileFiltering.js)
    --- выполнение фильтрации (как правило выполняется при завершения каждой из частей фильтрации) ---
    'messageType': 'filtering',
    'processing': 'execute',
    'clientIp': self.objRequest.clientIp,
    'taskIndex': self.taskIndex,
    'countFilesFound': countFilesFound,
    'countFilesProcessed': countFilesProcessed,
    'countCycleComplete': countCycleComplete,
    'countFoundFilesSize': countFoundFilesSize
*****************

завершение фильтрации по причине окончания перебора подходящих файлов

* Flashlight <- * //moth (processingFileFiltering.js)
    'messageType': 'filtering',
    'processing': 'complete',
    'clientIp': self.objRequest.clientIp,
    'taskIndex': self.taskIndex,
    'countCycleComplete': countFullCyclesComplete
*****************

* Moth <- * //flashlight (processingStopTaskIndex.js)
    messageType: 'filtering',
    processing: 'off',
    taskIndex: taskIndex
*****************

* Flashlight <- * //moth (filesFiltering.js)
    'messageType': 'filtering',
    'processing': 'stop',
    'taskIndex': requestString.taskIndex
*****************


        --- UPLOAD FILES ---
_____________________________________
Moth routing
let objProcessing = {
        "start": startProcessingDownloadFiles,
        "stop": stopProcessingDownloadFiles,
        "resume": resumeProcessingDownloadFiles,
        "cancel": cancelProcessingDownloadFiles,
        "ready": readyProcessingDownloadFiles,
        "error": errorProcessingDownloadFiles,
        "file received successfully": receivedSuccessfullyProcessingDownloadFiles,
        "file not received": notReceivedProcessingDownloadFiles
}

Flashlight routing
let objProcessing = {
        'ready': processingToDownloadFiles.ready,
        'execute': processingToDownloadFiles.execute,
        'execute completed': processingToDownloadFiles.executeCompleted,
        'execute retransmission': processingToDownloadFiles.executeRetransmission,
        'execute retransmission completed': processingToDownloadFiles.executeRetransmissionCompleted,
        'stop': processingToDownloadFiles.stop,
        'complete': processingToDownloadFiles.complete,
        'cancel': processingToDownloadFiles.cancel
    }


                ******* Moth <- ********
    запрос на выгрузку
//moth (toUploadFiles.js) <-- //flashlight (downloadManagementFiles.js)
    'messageType': 'download files',
    'processing': 'start',
    'taskIndex': id,
    'countFilesFound': result[0],
    'directoryFiltering': result[1]
*****************

                ******* Flashlight <- ********
    подтверждение готовности к выгрузке
//flashlight (processingToDownloadFiles.js) <-- //moth (toUploadFiles.js)
    "messageType": "download files",
    "processing": "ready",
    "taskIndex": self.requestObj.taskIndex,
    "listFilesName": arrayFilesName
*****************

                ******* Flashlight <- ********
    отмена выгрузки по причине ошибки
//flashlight (processingToDownloadFiles.js) <-- //moth (toUploadFiles.js)
    "messageType": "download files",
    "processing": "cancel",
    "taskIndex": self.requestObj.taskIndex
*****************

                ******* Flashlight <- ********
    начало выгрузки, отправляется перед отправкой файла в бинарном виде
//flashlight (processingToDownloadFiles.js) <-- //moth (toUploadFiles.js) 
    "messageType": "download files",
    "processing": "execute",
    "taskIndex": self.requestObj.taskIndex,
    "fileName": fileName,
    "fileFullSize": obj.size
*****************

---> передача на flashlight файла в бинарном виде
---> после окончания передачи файла

            ******* Flashlight <- ******** 
    отправляется после завершения передачи файла в бинарном виде
//flashlight (processingToDownloadFiles.js) <-- //moth (processingToUploadFiles.js)
    PROCESSING_TYPE - задается на основании если это
- начальная передача то 'execute completed'
- если повторная передача то 'execute retransmission completed'

    "messageType": "download files",
    "processing": PROCESSING_TYPE            
    "taskIndex": self.requestObj.taskIndex,
    "fileName" : fileName,
    "checksum" : stdout.substr(0, stdout.length - 1)
*****************

            ******* Moth <- ******** 
    отправляется после приема файла в бинарном виде
//moth (toUploadFiles.js) <-- //flashlight (processingToDownloadFiles.js)
    PROCESSING_TYPE - задается на основании если успешности приема файла
- 'file received successfully' если успешно принят
- 'file not received' если передача была не успешна

    "messageType": "download files",
    "processing": PROCESSING_TYPE            
    "taskIndex": self.requestObj.taskIndex,
    "fileName" : fileName,
    "checksum" : stdout.substr(0, stdout.length - 1)
*****************

            ******* Flashlight <- ******** 
    отправляется при завершении передачи файлов (когда счетчик передоваемых файлов = 0)        
//flashlight (processingToDownloadFiles.js) <-- //moth (toUploadFiles.js)
    "messageType": "download files",
    "processing": "complete",
    "taskIndex": self.requestObj.taskIndex,
    "countFilesLoadingSuccessfully": objectProcessToUploading.filesLoading.length,
    "countFilesLoadingError": objectProcessToUploading.filesLoadingError.length
*****************

---> далее flashlight проверяет очередь на загрузку файлов и если есть цикл повторяется заново, если нет то ничего не происходит

            ******* Moth <- ******** 
    запрос на остановку
//moth (toUploadFiles.js) <-- //flashlight (processingFilesUpload.js)
    'messageType': 'download files',
    'processing': 'stop',
    'taskIndex': id
*****************

---> далее moth ничего не отвечает но выполняется действия по очистке массивов с данными необходимыми для передачи файлов

            ******* Moth <- ******** 
    запрос на возобновление
//moth (toUploadFiles.js) <-- //flashlight (processingFilesUpload.js)
    'messageType': 'download files',
    'processing': 'resume',
    'taskIndex': sourceId + ':' + taskIndex,
    'countFilesFound': result[0],
    'directoryFiltering': result[1],
    'arrayNameReceivedFiles': arrayNameReceivedFiles
*****************

---> далее moth либо сообщает об ошибке либо 

            ******* Flashlight <- ********
    подтверждение готовности к выгрузке
//flashlight (processingToDownloadFiles.js) <-- //moth (toUploadFiles.js)
    "messageType": "download files",
    "processing": "ready",
    "taskIndex": self.requestObj.taskIndex,
    "listFilesName": arrayFilesName
*****************

           ПРИ ОШИБКЕ ******* Flashlight <- или mooth <- ******** ПРИ ОШИБКЕ
    отмена выгрузки, возникает при обнаружении ошибки на стороне moth или flashlight (например ненайденны файлы)
//flashlight (processingToDownloadFiles.js) <-- //moth (toUploadFiles.js)
//moth (toUploadFiles.js) <-- //flashlight (processingToDownloadFiles.js)
    "messageType": "download files",
    "processing": "cancel",
    "taskIndex": self.requestObj.taskIndex
*****************
